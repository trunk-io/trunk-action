name: Setup environment
author: trunk.io
description: Automatic setup for trunk check and dependencies (e.g. Node)

inputs:
  cache-key:
    description:
      A key unique to the repo/branch this action is being run on (e.g. the repo name and branch)
    required: false
  setup-deps:
    description:
      Install dependencies for trunk check that the trunk CLI does not manage. This is only
      necessary if you have Node dependencies in your package.json that your Node linters need (e.g.
      eslint dependencies, or @types packages).
    required: false
    default: false

runs:
  using: composite
  steps:
    - name: Init on-demand
      shell: bash
      run: |
        if [ ! -e .trunk/trunk.yaml ]; then
          ${TRUNK_PATH:-trunk} init
        fi

    - name: Detect npm/yarn/pnpm & custom setup
      shell: bash
      if: inputs.setup-deps
      run: |
        if [ -e package-lock.json ]; then
          cat >>$GITHUB_ENV <<EOF
        PACKAGE_MANAGER=npm
        INSTALL_CMD=npm ci
        HASH_GLOB=**/package-lock.json
        EOF
        elif [ -e yarn.lock ]; then
          cat >>$GITHUB_ENV <<EOF
        PACKAGE_MANAGER=yarn
        INSTALL_CMD=yarn install --immutable
        HASH_GLOB=**/yarn.lock
        EOF
        elif [ -e pnpm-lock.yaml ]; then
          cat >>$GITHUB_ENV <<EOF
        PACKAGE_MANAGER=pnpm
        INSTALL_CMD=pnpm install --frozen-lockfile
        HASH_GLOB=**/pnpm-lock.yaml
        EOF
        else
          exit 0
        fi

        if [ -e .nvmrc ]; then
          cat >>$GITHUB_ENV <<EOF
        NODE_VERSION_FILE=.nvmrc
        EOF
          exit 0
        elif [ -e .node-version ]; then
          cat >>$GITHUB_ENV <<EOF
        NODE_VERSION_FILE=.node-version
        EOF
          exit 0
        elif [ -e .tool-versions ]; then
          cat >>$GITHUB_ENV <<EOF
        NODE_VERSION_FILE=.tool-versions
        EOF
          exit 0
        elif [ -e package.json ]; then
          cat >>$GITHUB_ENV <<EOF
        NODE_VERSION_FILE=package.json
        EOF
          exit 0
        fi

        echo "Found node lockfiles but no node version to install"

        if which node > /dev/null; then
          echo "Detected existing node install"
          cat >>$GITHUB_ENV <<EOF
        RUN_INSTALL_NODE_PACKAGES=true
        EOF
        else
          echo "Could not find existing node install, skipping node package installation"
        fi

    - name: Install pnpm
      if: inputs.setup-deps && env.PACKAGE_MANAGER == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install Node dependencies
      if: inputs.setup-deps && env.PACKAGE_MANAGER && env.NODE_VERSION_FILE
      uses: actions/setup-node@v3
      with:
        node-version-file: ${{ env.NODE_VERSION_FILE }}

    - name: Cache node_modules
      if: inputs.setup-deps && env.PACKAGE_MANAGER
      uses: actions/cache@v3
      with:
        path: node_modules/
        key: ${{ runner.os }}-node_modules-${{ inputs.cache-key }}-${{ hashFiles(env.HASH_GLOB) }}

    - name: Install ${{ env.PACKAGE_MANAGER }} packages
      if:
        inputs.setup-deps && env.PACKAGE_MANAGER && (env.NODE_VERSION_FILE ||
        env.RUN_INSTALL_NODE_PACKAGES)
      shell: bash
      run: ${{ env.INSTALL_CMD }}
