name: Setup environment
author: trunk.io
description: Automatic setup for trunk check and dependencies (e.g. Node)

runs:
  using: composite
  steps:
    - name: Init on-demand
      shell: bash
      run: |
        if [ ! -e .trunk/trunk.yaml ]; then
          ${TRUNK_PATH:-trunk} init
        fi

    - name: Detect npm/yarn/pnpm & custom setup
      id: detect
      shell: bash
      run: |
        if [ -e package-lock.json ]; then
          echo "package_manager=npm" >> $GITHUB_OUTPUT
          echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
          echo "hash_glob=**/package-lock.json" >> $GITHUB_OUTPUT
        elif [ -e yarn.lock ]; then
          echo "package_manager=yarn" >> $GITHUB_OUTPUT
          echo "install_cmd=yarn install --immutable" >> $GITHUB_OUTPUT
          echo "hash_glob=**/yarn.lock" >> $GITHUB_OUTPUT
        elif [ -e pnpm-lock.yaml ]; then
          echo "package_manager=pnpm" >> $GITHUB_OUTPUT
          echo "install_cmd=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
          echo "hash_glob=**/pnpm-lock.yaml" >> $GITHUB_OUTPUT
        else
          exit 0
        fi

        if [ -e .nvmrc ]; then
          echo "node_version_file=.nvmrc" >> $GITHUB_OUTPUT
          exit 0
        elif [ -e .node-version ]; then
          echo "node_version_file=.node-version" >> $GITHUB_OUTPUT
          exit 0
        elif [ -e .tool-versions ]; then
          echo "node_version_file=.tool-versions" >> $GITHUB_OUTPUT
          exit 0
        elif [ -e package.json ]; then
          echo "node_version_file=package.json" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Found node lockfiles but no node version to install"

        if which node > /dev/null; then
          echo "Detected existing node install"
          echo "run_install_node_packages=true" >> $GITHUB_OUTPUT
        else
          echo "Could not find existing node install, skipping node package installation"
        fi

    - name: Install pnpm
      if: steps.detect.outputs.package_manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install Node dependencies
      if: steps.detect.outputs.package_manager && steps.detect.outputs.node_version_file
      uses: actions/setup-node@v3
      with:
        node-version-file: ${{ steps.detect.outputs.node_version_file }}

    #- name: Cache node_modules
    #  uses: actions/cache@v3
    #  with:
    #    path: node_modules/
    #    key: ${{ runner.os }}-node_modules-${{ hashFiles(steps.detect.outputs.hash_glob) }}

    - name: Install ${{ steps.detect.outputs.package_manager }} packages
      if:
        steps.detect.outputs.package_manager && (steps.detect.outputs.node_version_file ||
        steps.detect.outputs.run_install_node_packages)
      shell: bash
      run: ${{ steps.detect.outputs.install_cmd }}
