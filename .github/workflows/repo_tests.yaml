name: repo_tests
on: [workflow_dispatch, workflow_call]

jobs:
  repo_tests:
    name: ${{ matrix.repo }} ${{ matrix.description }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        #repo:
        #- eslint/eslint
        #- facebook/jest
        #- freeCodeCamp/freeCodeCamp
        #- mochajs/mocha
        #- psf/black
        #- typescript-eslint/typescript-eslint
        include:
          - repo: highlightjs/highlight.js
            description: (uses npm)
            post-init: |
              cp local-action/repo_tests/highlightjs.yaml .trunk/user.yaml

          - repo: jbeder/yaml-cpp
            description: (compile-commands.json)
            post-init: |
              # black complains about py2 code
              ${TRUNK_PATH} check disable black
              mkdir build
              cd build
              cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
              cd ..
              ln -s build/compile_commands.json
              sed -i "s|lint:|lint:\n  compile_commands: json|" .trunk/trunk.yaml
              cp local-action/repo_tests/yaml_cpp.yaml .trunk/user.yaml
              ${TRUNK_PATH} check enable clang-tidy

          - repo: pallets/flask
            post-init: |
              cp local-action/repo_tests/flask.yaml .trunk/user.yaml

          - repo: postcss/postcss
            description: (uses pnpm)
            post-init: |
              ${TRUNK_PATH} check enable eslint

          - repo: replayio/devtools
            description: (has trunk.yaml)
            post-init: |
              # replay is on a very old version
              ${TRUNK_PATH} upgrade
            trunk-path: node_modules/.bin/trunk

          - repo: sass/sass
            description: (uses npm)

          - repo: sheldonhull/sheldonhull.hugo
            description: (has trunk.yaml)

          - repo: shopify/draggable
            description: (uses yarn)

          - repo: terraform-linters/tflint
            post-init: |
              # golangci-lint needs us to init with a newer go runtime
              ${TRUNK_PATH} check disable golangci-lint

          - repo: trunk-io/plugins

          - repo: vuejs/core
            description: (uses pnpm)
            post-init: |
              # svgo gets confused by JS module loading
              ${TRUNK_PATH} check disable svgo

          - repo: z-shell/wiki
            description: (has trunk.yaml)

    steps:
      - name: Checkout ${{ matrix.repo }}
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.repo }}

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          path: local-action

      - name: Run trunk-action in ${{ matrix.repo }}
        id: trunk
        uses: ./local-action/
        with:
          cache: false
          check-mode: all
          trunk-path: ${{ matrix.trunk-path }}
          post-init: ${{ matrix.post-init }}
        continue-on-error: true

      - name: Check for task failures
        shell: python
        run: |
          import json, os, sys

          matrix_repo = '${{ matrix.repo }}'
          matrix_description = '${{ matrix.description }}'

          landing_state = json.load(open('.trunk/landing-state.json'))
          lint_action_count = len(landing_state.get("lintActions", []))
          task_failure_count = len(landing_state.get("taskFailures", []))

          print("::group::.trunk/trunk.yaml")
          print(open(".trunk/trunk.yaml").read())
          print("::endgroup::")

          with open(os.environ['GITHUB_ENV'], 'a') as env:
            env.write('landing_state_artifact_name=')
            env.write(f'{matrix_repo.replace("/", " ")} ({matrix_description})')
            env.write('\n')

          print(f'lint_action_count={lint_action_count}')
          print(f'task_failure_count={task_failure_count}')

          if lint_action_count == 0:
            print("No lint actions were run - something went wrong.")
            sys.exit(1)

          if task_failure_count > 0:
            print('Failures can be viewed in the logs for the previous step')
            sys.exit(1)

          print("No task failures!")

      - name: Upload landing state
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.landing_state_artifact_name }} landing state
          path: .trunk/landing-state.json
