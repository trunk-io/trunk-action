name: Trunk Check Setup
author: trunk.io
description: Shared setup logic

branding:
  icon: check
  color: green

inputs:
  trunk-path:
    description:
      Path to Trunk Launcher. If not provided, we'll look for it the repo root, `.trunk/bin` and
      `tools/`. If it can't be found anywhere and is not provided explicitly, we'll download it on
      demand.
    required: false

  post-init:
    description: Steps to run after auto-init / before check
    required: false

runs:
  using: composite
  steps:
    - name: Locate trunk
      shell: bash
      run: ${GITHUB_ACTION_PATH}/locate_trunk.sh
      env:
        INPUT_TRUNK_PATH: ${{ inputs.trunk-path }}

    - name: Init on-demand
      shell: bash
      run: |
        if [ ! -e .trunk/trunk.yaml ]; then
          ${TRUNK_PATH} init
        fi

    - name: Detect npm/yarn/pnpm
      id: detect
      shell: bash
      run: |
        if [ -e package-lock.json ]; then
          echo "package_manager=npm" >> $GITHUB_OUTPUT
          echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
          echo "hash_glob=**/package-lock.json" >> $GITHUB_OUTPUT
        elif [ -e yarn.lock ]; then
          echo "package_manager=yarn" >> $GITHUB_OUTPUT
          echo "install_cmd=yarn install --immutable" >> $GITHUB_OUTPUT
          echo "hash_glob=**/yarn.lock" >> $GITHUB_OUTPUT
        elif [ -e pnpm-lock.yaml ]; then
          echo "package_manager=pnpm" >> $GITHUB_OUTPUT
          echo "install_cmd=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
          echo "hash_glob=**/pnpm-lock.yaml" >> $GITHUB_OUTPUT
        fi

    - name: Install pnpm
      if: steps.detect.outputs.package_manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install Node dependencies
      if: steps.detect.outputs.package_manager
      uses: actions/setup-node@v3

    #- name: Cache node_modules
    #  uses: actions/cache@v3
    #  with:
    #    path: node_modules/
    #    key: ${{ runner.os }}-node_modules-${{ hashFiles(steps.detect.outputs.hash_glob) }}

    - name: Install ${{ steps.detect.outputs.package_manager }} packages
      if: steps.detect.outputs.package_manager
      shell: bash
      run: ${{ steps.detect.outputs.install_cmd }}

    - name: Post-init steps
      if: inputs.post-init
      shell: bash
      run: ${{ inputs.post-init }}
